{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getProperty = (obj, name) => {\n  name = name.split(\".\");\n  for (let i = 0; i < name.length - 1; i++) {\n    obj = obj[name[i]];\n    if (typeof obj !== \"object\" || !obj || Array.isArray(obj)) return;\n  }\n  return obj[name.pop()];\n};\nconst setProperty = (obj, name, value) => {\n  name = name.split(\".\");\n  for (let i = 0; i < name.length - 1; i++) {\n    if (typeof obj[name[i]] !== \"object\" && obj[name[i]] !== undefined) return;\n    if (Array.isArray(obj[name[i]])) return;\n    if (!obj[name[i]]) obj[name[i]] = {};\n    obj = obj[name[i]];\n  }\n  obj[name.pop()] = value;\n};\nclass OptionsDefaulter {\n  constructor() {\n    this.defaults = {};\n    this.config = {};\n  }\n  process(options) {\n    options = Object.assign({}, options);\n    for (let name in this.defaults) {\n      switch (this.config[name]) {\n        case undefined:\n          if (getProperty(options, name) === undefined) {\n            setProperty(options, name, this.defaults[name]);\n          }\n          break;\n        case \"call\":\n          setProperty(options, name, this.defaults[name].call(this, getProperty(options, name), options));\n          break;\n        case \"make\":\n          if (getProperty(options, name) === undefined) {\n            setProperty(options, name, this.defaults[name].call(this, options));\n          }\n          break;\n        case \"append\":\n          {\n            let oldValue = getProperty(options, name);\n            if (!Array.isArray(oldValue)) {\n              oldValue = [];\n            }\n            oldValue.push(...this.defaults[name]);\n            setProperty(options, name, oldValue);\n            break;\n          }\n        default:\n          throw new Error(\"OptionsDefaulter cannot process \" + this.config[name]);\n      }\n    }\n    return options;\n  }\n  set(name, config, def) {\n    if (def !== undefined) {\n      this.defaults[name] = def;\n      this.config[name] = config;\n    } else {\n      this.defaults[name] = config;\n      delete this.config[name];\n    }\n  }\n}\nmodule.exports = OptionsDefaulter;","map":null,"metadata":{},"sourceType":"script"}