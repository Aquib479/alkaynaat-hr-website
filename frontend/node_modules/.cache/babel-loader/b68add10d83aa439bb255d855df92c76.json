{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource,\n  RawSource\n} = require(\"webpack-sources\");\nconst stringifySafe = data => {\n  const stringified = JSON.stringify(data);\n  if (!stringified) {\n    return undefined; // Invalid JSON\n  }\n\n  return stringified.replace(/\\u2028|\\u2029/g, str => str === \"\\u2029\" ? \"\\\\u2029\" : \"\\\\u2028\"); // invalid in JavaScript but valid JSON\n};\n\nclass JsonGenerator {\n  generate(module, dependencyTemplates, runtimeTemplate) {\n    const source = new ConcatSource();\n    const data = module.buildInfo.jsonData;\n    if (data === undefined) {\n      return new RawSource(runtimeTemplate.missingModuleStatement({\n        request: module.rawRequest\n      }));\n    }\n    if (Array.isArray(module.buildMeta.providedExports) && !module.isUsed(\"default\")) {\n      // Only some exports are used: We can optimize here, by only generating a part of the JSON\n      const reducedJson = {};\n      for (const exportName of module.buildMeta.providedExports) {\n        if (exportName === \"default\") continue;\n        const used = module.isUsed(exportName);\n        if (used) {\n          reducedJson[used] = data[exportName];\n        }\n      }\n      source.add(`${module.moduleArgument}.exports = ${stringifySafe(reducedJson)};`);\n    } else {\n      source.add(`${module.moduleArgument}.exports = ${stringifySafe(data)};`);\n    }\n    return source;\n  }\n}\nmodule.exports = JsonGenerator;","map":null,"metadata":{},"sourceType":"script"}