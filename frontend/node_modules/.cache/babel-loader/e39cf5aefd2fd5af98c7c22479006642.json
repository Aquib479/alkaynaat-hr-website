{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_1 = require(\"react\");\nfunction useLocalStorage(key, defaultValue, options) {\n  var opts = (0, react_1.useMemo)(function () {\n    return __assign({\n      serializer: JSON.stringify,\n      parser: JSON.parse,\n      logger: console.log,\n      syncData: true\n    }, options);\n  }, [options]);\n  var serializer = opts.serializer,\n    parser = opts.parser,\n    logger = opts.logger,\n    syncData = opts.syncData;\n  var rawValueRef = (0, react_1.useRef)(null);\n  var _a = (0, react_1.useState)(function () {\n      if (typeof window === \"undefined\") return defaultValue;\n      try {\n        rawValueRef.current = window.localStorage.getItem(key);\n        var res = rawValueRef.current ? parser(rawValueRef.current) : defaultValue;\n        return res;\n      } catch (e) {\n        logger(e);\n        return defaultValue;\n      }\n    }),\n    value = _a[0],\n    setValue = _a[1];\n  (0, react_1.useEffect)(function () {\n    if (typeof window === \"undefined\") return;\n    var updateLocalStorage = function () {\n      // Browser ONLY dispatch storage events to other tabs, NOT current tab.\n      // We need to manually dispatch storage event for current tab\n      if (value !== undefined) {\n        var newValue = serializer(value);\n        var oldValue = rawValueRef.current;\n        rawValueRef.current = newValue;\n        window.localStorage.setItem(key, newValue);\n        window.dispatchEvent(new StorageEvent(\"storage\", {\n          storageArea: window.localStorage,\n          url: window.location.href,\n          key: key,\n          newValue: newValue,\n          oldValue: oldValue\n        }));\n      } else {\n        window.localStorage.removeItem(key);\n        window.dispatchEvent(new StorageEvent(\"storage\", {\n          storageArea: window.localStorage,\n          url: window.location.href,\n          key: key\n        }));\n      }\n    };\n    try {\n      updateLocalStorage();\n    } catch (e) {\n      logger(e);\n    }\n  }, [value]);\n  (0, react_1.useEffect)(function () {\n    if (!syncData) return;\n    var handleStorageChange = function (e) {\n      if (e.key !== key || e.storageArea !== window.localStorage) return;\n      try {\n        if (e.newValue !== rawValueRef.current) {\n          rawValueRef.current = e.newValue;\n          setValue(e.newValue ? parser(e.newValue) : undefined);\n        }\n      } catch (e) {\n        logger(e);\n      }\n    };\n    if (typeof window === \"undefined\") return;\n    window.addEventListener(\"storage\", handleStorageChange);\n    return function () {\n      return window.removeEventListener(\"storage\", handleStorageChange);\n    };\n  }, [key, syncData]);\n  return [value, setValue];\n}\nexports.default = useLocalStorage;","map":null,"metadata":{},"sourceType":"script"}